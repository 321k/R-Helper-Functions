random <- function(x){
# Returns 20 random rows from data frame
  s=sample(nrow(x), 10)
  return(x[s,])
}

create_bucket <- function(x, names=c('lower', 'higher'), q=3){
  if(is.numeric(x)){
    cutoff <- quantile(x, na.rm=T)[q]
    res <- character(length(x))
    res[1:length(res)] <- 'Unknown'
    res[which(x<cutoff)] <- names[1]
    res[which(x>=cutoff)] <- names[2]
    res <- as.factor(res)
    return(res)
  } else if (is.character(x)){
    tbl <- as.data.frame(table(x))
    tbl <- tbl[order(tbl[,2]),]
    n <- nrow(tbl)
    m <- max(n-5, 1)
    tbl <- tbl[m:n,]
    x[-which(x %in% tbl[,1])] <- 'Other'
    res <-factor(x)
    return(res)
  }
}

classes <- function(x, classes=NA){
  x <- as.data.frame(x)
  if(length(classes) == ncol(x)){
    for(i in 1:ncol(x)){
      if(classes[i] == 'factor') x[,i] <- as.factor(x[,i])
      if(classes[i] == 'numeric') x[,i] <- as.numeric(as.character(x[,i]))
      if(classes[i] == 'date') x[,i] <- as.Date(as.character(x[,i]))
    }
    return(x)
  } else {
  for(i in 1:ncol(x)) print(class(x[,i]))
  }
}


# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)

  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)

  numPlots = length(plots)

  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                    ncol = cols, nrow = ceiling(numPlots/cols))
  }

 if (numPlots==1) {
    print(plots[[1]])

  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))

    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))

      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}
